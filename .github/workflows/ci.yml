name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Add permissions for security scanning
permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: nutritionrecipe
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Set environment variables for testing
      run: |
        echo "TESTING=false" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DB_NAME=nutritionrecipe" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=password" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

    - name: Initialize PostgreSQL database
      run: |
        python init_postgres.py

    - name: Load test data
      run: |
        python load_data.py

    - name: Run tests
      run: |
        pytest test_main.py -v --tb=short

    - name: Test coverage
      run: |
        pytest test_main.py --cov=main --cov=database --cov=load_data --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black (code formatting)
      run: black --check --diff main.py test_main.py database.py load_data.py init_postgres.py

    # - name: Run isort (import sorting)
    #   run: isort --check-only --diff main.py test_main.py database.py load_data.py init_postgres.py

    - name: Run flake8 (linting)
      run: flake8 main.py test_main.py database.py load_data.py init_postgres.py --max-line-length=80 --extend-ignore=E203,W503

    - name: Run mypy (type checking)
      run: mypy main.py database.py load_data.py init_postgres.py --ignore-missing-imports

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker network
      run: docker network create recipe-network

    - name: Start PostgreSQL container
      run: |
        docker run -d --name test-postgres --network recipe-network \
          -e POSTGRES_DB=nutritionrecipe \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=password \
          -p 5432:5432 \
          postgres:15

    - name: Start Redis container
      run: |
        docker run -d --name test-redis --network recipe-network \
          -p 6379:6379 \
          redis:7-alpine

    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Attempt $i: PostgreSQL not ready yet, waiting..."
          sleep 2
        done

        echo "Waiting for Redis to be ready..."
        for i in {1..30}; do
          if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
            echo "Redis is ready!"
            break
          fi
          echo "Attempt $i: Redis not ready yet, waiting..."
          sleep 2
        done

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools

    - name: Build Docker image
      run: |
        docker build -t recipe-api:latest .

    - name: Test Docker container
      run: |
        # Start container with proper network and environment
        docker run -d --name test-container --network recipe-network \
          -p 8000:8000 \
          -v $(pwd)/sample-data:/app/sample-data \
          -e DB_HOST=test-postgres \
          -e DB_PORT=5432 \
          -e DB_NAME=nutritionrecipe \
          -e DB_USER=postgres \
          -e DB_PASSWORD=password \
          -e REDIS_URL=redis://test-redis:6379 \
          recipe-api:latest

        # Wait for container to be ready and healthy
        echo "Waiting for container to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "Container is ready!"
            break
          fi
          echo "Attempt $i: Container not ready yet, waiting..."
          sleep 3
        done

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1

        # Test root endpoint
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/ || exit 1

        # Test Redis status endpoint
        echo "Testing Redis status endpoint..."
        curl -f http://localhost:8000/redis/status || exit 1

        # Test getting ingredients (should have data)
        echo "Testing ingredients endpoint..."
        curl -f "http://localhost:8000/ingredients/?limit=5" || exit 1

        # Clean up containers
        docker stop test-container test-postgres test-redis
        docker rm test-container test-postgres test-redis
        docker network rm recipe-network

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'